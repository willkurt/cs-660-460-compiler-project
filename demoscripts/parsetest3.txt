Script started on Mon 23 Mar 2009 09:34:29 AM PDT
]0;will@ubuntu-8: ~/cs660_proj/cs-660-460-compiler-projectwill@ubuntu-8:~/cs660_proj/cs-660-460-compiler-project$ ./parsetest3.sh 
float foo(){ 
float x = 5.6;
return x;
}
int main(){
foo();
}
warning: x is already defined in current scope
warning: foo is already defined in current scope
type_specifier <- FLOAT
declaration_specifiers <- type_specifier
identifier  <- IDENTIFIER
direct_declarator <- identifier
direct_declarator <- direct_declarator '(' ')'
declarator <- direct_declarator
***end ln: 0*****
type_specifier <- FLOAT
declaration_specifiers <- type_specifier
identifier  <- IDENTIFIER
direct_declarator <- identifier
declarator <- direct_declarator
constant <- FLOATING_CONSTANT
primary_expression <- constant
postfix_expression <- primary_expression
unary_expression <- postfix_expression
cast_expression <- unary_expression
multiplicative_expression <- cast_expression
additive_expression <- multiplicative_expression
shift_expression <- additive_expression
relational_expression <- shift_expression
equality_expression <- relational_expression
and_expression <- equality_expression
exclusive_or_expression <- and_expression
inclusive_or_expression <- exclusive_or_expression
logical_and_expression <- inclusive_or_expression
logical_or_expression <- logical_and_expression
conditional_expression <- logical_or_expression
assignment_expression <- conditional_expression
initializer <- assignment_expression
init_declarator <- declarator '=' initializer
init_declarator_list <- init_declarator
declaration <- declaration_specifiers init_declarator_list ';'
declaration_list <- declaration
***end ln: 1*****
identifier  <- IDENTIFIER
primary_expression <- identifier
postfix_expression <- primary_expression
unary_expression <- postfix_expression
cast_expression <- unary_expression
multiplicative_expression <- cast_expression
additive_expression <- multiplicative_expression
shift_expression <- additive_expression
relational_expression <- shift_expression
equality_expression <- relational_expression
and_expression <- equality_expression
exclusive_or_expression <- and_expression
inclusive_or_expression <- exclusive_or_expression
logical_and_expression <- inclusive_or_expression
logical_or_expression <- logical_and_expression
conditional_expression <- logical_or_expression
assignment_expression <- conditional_expression
expression <- assignment_expression
jump_statement <- RETURN expression ';'
statement <- jump_statement
statement_list <- statement
***end ln: 2*****
compound_statement <- '{' declaration_list statement_list '}'
function_definition <- declaration_specifiers declarator compound_statement
external_declaration <- function_definition
translation_unit <- external_declaration
***end ln: 3*****
type_specifier <- INT
declaration_specifiers <- type_specifier
identifier  <- IDENTIFIER
direct_declarator <- identifier
direct_declarator <- direct_declarator '(' ')'
declarator <- direct_declarator
***end ln: 4*****
identifier  <- IDENTIFIER
primary_expression <- identifier
postfix_expression <- primary_expression
postfix_expression <- postfix_expression '(' ')'
unary_expression <- postfix_expression
cast_expression <- unary_expression
multiplicative_expression <- cast_expression
additive_expression <- multiplicative_expression
shift_expression <- additive_expression
relational_expression <- shift_expression
equality_expression <- relational_expression
and_expression <- equality_expression
exclusive_or_expression <- and_expression
inclusive_or_expression <- exclusive_or_expression
logical_and_expression <- inclusive_or_expression
logical_or_expression <- logical_and_expression
conditional_expression <- logical_or_expression
assignment_expression <- conditional_expression
expression <- assignment_expression
expression_statement <- expression ';'
statement <- expression_statement
statement_list <- statement
***end ln: 5*****
compound_statement <- '{' statement_list '}'
function_definition <- declaration_specifiers declarator compound_statement
external_declaration <- function_definition
translation_unit <- translation_unit external_declaration
***end ln: 6*****
]0;will@ubuntu-8: ~/cs660_proj/cs-660-460-compiler-projectwill@ubuntu-8:~/cs660_proj/cs-660-460-compiler-project$ exit
exit

Script done on Mon 23 Mar 2009 09:34:37 AM PDT
